apply plugin: 'com.android.application'
android {
    compileSdkVersion rootProject.ext.compileSdkVersion as Integer
    buildToolsVersion rootProject.ext.buildToolsVersion as String
    defaultConfig {

        minSdkVersion rootProject.ext.minSdkVersion as Integer
        targetSdkVersion rootProject.ext.targetSdkVersion as Integer

        applicationId "com.learn"
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        ndk { abiFilters 'armeabi-v7a' }

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {//目录指向配置
        main {
            jniLibs.srcDirs = ['libs']//指定lib库目录
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation DESIGN
    implementation 'com.github.bumptech.glide:glide:4.8.0'
    implementation project(path: ':ffmpeg')
}

/**
 * 脚本构建块 优先执行
 */
buildscript {
    repositories {
        maven {
            url '../repo'
        }

    }
    dependencies {
//        classpath 'com.plugin.custom:PrintPlugin:1.0'  // 拼接方式依赖
        classpath group: 'com.plugin.custom', name: 'PrintPlugin',   // 分体方式依赖
                version: '1.0'
    }
}


/*
* 第一种方式：在Module中定义
* 1、给插件传参测试
* */
apply plugin: HelloPlugin
/**
 * 传参
 */
hellobean {
    name = '曹操'
    age = '1'
}
/**
 * Bean定义
 */
class HelloPluginExtension {
    String name
    String age
}

class HelloPlugin implements Plugin<Project> {
    // 此方法接受一个Project对象
    void apply(Project project) {
        System.out.println("========================");
        System.out.println("自定义Plugin的第一种方式 在我们构建项目的build.gradle脚本中直接编写!");

        // extensions 容器保存了hellobean 的参数，hellobean 为Hellobean的实体
        project.extensions.create("hellobean", HelloPluginExtension)
        System.out.println("name=${project.hellobean.name}  age=${project.hellobean.age}");

        System.out.println("========================");

        project.afterEvaluate {
            println "HelloPlugin.project.afterEvaluate= ${project.hellobean.name} age = ${project.hellobean.age}"
            // 向project对象添加hello任务

            project.task('hello') {
                println "Hello from the HelloPlugin name= ${project.hellobean.name} age = ${project.hellobean.age}"

                doFirst{
                    System.out.println("hello开始");
                }
                doLast {
                    System.out.println("hello结束");
                }
            }

            Task a = project.tasks["hello"]
            a.doFirst{
                System.out.println("doFirst");
            }
            a.doLast{
                System.out.println("doLast");
            }

            project.task('hello2',dependsOn:a) {
                System.out.println("hello2");
                doFirst{
                    System.out.println("hello2开始");
                }
                doLast {
                    System.out.println("hello2结束");
                }
            }


            project.task('hello3') {
                println "我是Hello3"

                doFirst{
                    System.out.println("我是Hello3开始");
                }
                doLast {
                    System.out.println("我是Hello3结束");
                }
            }
        }
    }

}

/**
 * 第二种方式：在buildsrc下的插件可以直接访问到
 * 尝试过了需要有.properties文件的配置才行，不然会找不见
 */
apply plugin: 'MyPlugin'

/**
 * 使用本地自定义的Task
 */
task greeting(type: com.test.one.GreetingTask) {
    greeting = 'another project working!'
}


/**
 * 第三种方式： maven形式依赖 目前配置的是本地库
 */
apply plugin: 'PrintPlugin'
printbean {
    name '哈哈哈'
    sex '女'
    age '18岁了'
}